{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=np.random.rand(12)\n",
    "y=np.random.rand(12)\n",
    "\n",
    "#The Mean Squared Error:\n",
    "def mean_squared(y_pred,y):\n",
    "    differences=y-y_pred\n",
    "    differences=np.square(differences)\n",
    "    return np.mean(differences) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1800968241355363"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared(y_pred,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mean_absolute(y_pred,y):\n",
    "    differences=y-y_pred\n",
    "    differences=np.abs(differences)\n",
    "    \n",
    "    return np.mean(differences)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33769213649532676"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute(y_pred,y)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "# notice that these values return different vaues for the loss value\n",
    "\n",
    "note this works for only one hot encoded variables.\n",
    "# taking results for the three classes,cats dogs and \n",
    "        horses     cats     Dogs\n",
    "\n",
    "horses: 3.45       -5.1     0.5\n",
    "cats:   2.4         3.2     0.7\n",
    "Dogs:   4.6        -0.5     2.2\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "horse_score=max(0,(-5.1)-(3.45+1))+max(0,(0.5)-(3.45+1))\n",
    "cats_score=max(0,(2.4)-(3.2+1))+max(0,(0.7)-(3.2+1))\n",
    "Dogs_score=max(0,(4.6)-(2.2+1))+max(0,(-0.5)-(2.2+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "horse_score::0\n",
      "cats_score::0\n",
      "Dogs_score::1.3999999999999995\n"
     ]
    }
   ],
   "source": [
    "print('horse_score::'+str(horse_score))\n",
    "print('cats_score::'+str(cats_score))\n",
    "print('Dogs_score::'+str(Dogs_score))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "From the above cell we can deduce that, horse and the cats were correctly classified.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:opencv-env] *",
   "language": "python",
   "name": "conda-env-opencv-env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
